# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
name: CI Build
on:
  push:
    branches: ['master', 'v1-10-test', 'v1-10-*']
    tags: ['v1.10.12\+astro.*']
  pull_request:
    branches: ['master', 'v1-10-test', 'v1-10-*']

env:

  MOUNT_LOCAL_SOURCES: "false"
  FORCE_ANSWER_TO_QUESTIONS: "yes"
  SKIP_CHECK_REMOTE_IMAGE: "true"
  SKIP_CI_IMAGE_CHECK: "true"
  DB_RESET: "true"
  VERBOSE: "true"
  UPGRADE_TO_LATEST_CONSTRAINTS: ${{ github.event_name == 'push' || github.event_name == 'scheduled' }}
  PYTHON_MAJOR_MINOR_VERSION: 3.6
  USE_GITHUB_REGISTRY: "true"
  CACHE_IMAGE_PREFIX: ${{ github.repository }}
  CACHE_REGISTRY_USERNAME: ${{ github.actor }}
  CACHE_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:

  cancel-previous-workflow-run:
    timeout-minutes: 60
    name: "Cancel previous workflow run"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get ci workflow id
        run: "scripts/ci/cancel/get_workflow_id.sh"
        env:
          WORKFLOW: ci
          GITHUB_TOKEN: ${{ github.token }}
          GITHUB_REPOSITORY: ${{ github.repositoru }}
      - name: Cancel workflow ${{ github.workflow }}
        uses: styfle/cancel-workflow-action@0.3.2
        with:
          workflow_id: ${{ env.WORKFLOW_ID }}
          access_token: ${{ github.token }}

  static-checks:
    timeout-minutes: 60
    name: "Static checks"
    runs-on: ubuntu-latest
    needs:
      - cancel-previous-workflow-run
    env:
      MOUNT_SOURCE_DIR_FOR_STATIC_CHECKS: "true"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - name: Cache pre-commit env
        uses: actions/cache@v2
        env:
          cache-name: cache-pre-commit-v1-10-test-v2
        with:
          path: ~/.cache/pre-commit
          key: ${{ env.cache-name }}-${{ github.job }}-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Build CI image"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Static checks"
        run: ./scripts/ci/static_checks/ci_run_static_checks.sh
      - name: "Cancel workflow on static checks failure"
        if: ${{ failure() }}
        uses: andymckay/cancel-action@0.2
  docs:
    timeout-minutes: 60
    name: "Build docs"
    runs-on: ubuntu-latest
    needs:
      - cancel-previous-workflow-run
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.6'
      - name: "Build CI image ${{ matrix.python-version }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Build docs"
        run: ./scripts/ci/docs/ci_docs.sh
      - name: "Cancel workflow on docs failure"
        if: ${{ failure() }}
        uses: andymckay/cancel-action@0.2

  trigger-tests:
    timeout-minutes: 5
    name: "Checks if tests should be run"
    runs-on: ubuntu-latest
    needs:
      - cancel-previous-workflow-run
    outputs:
      run-tests: ${{ steps.trigger-tests.outputs.run-tests }}
    steps:
      - uses: actions/checkout@v2
      - name: "Check if tests should be run"
        run: "./scripts/ci/tools/ci_check_if_tests_should_be_run.sh"
        id: trigger-tests

  tests-kubernetes:
    timeout-minutes: 80
    name: "K8s: ${{matrix.kube-mode}} ${{matrix.python-version}} ${{matrix.kubernetes-version}}"
    runs-on: ubuntu-latest
    needs: [trigger-tests]
    strategy:
      matrix:
        python-version: [3.6, 3.7]
        kube-mode:
          - image
        kubernetes-version: [v1.18.6, v1.17.5, v1.16.9]
        kind-version:
          - "v0.8.0"
        helm-version:
          - "v3.2.4"
      fail-fast: false
    env:
      BACKEND: postgres
      TEST_TYPE: ${{ matrix.test-type }}
      RUN_TESTS: "true"
      SKIP_CI_IMAGE_CHECK: "true"
      RUNTIME: "kubernetes"
      ENABLE_KIND_CLUSTER: "true"
      PYTHON_MAJOR_MINOR_VERSION: "${{ matrix.python-version }}"
      KUBERNETES_MODE: "${{ matrix.kube-mode }}"
      KUBERNETES_VERSION: "${{ matrix.kubernetes-version }}"
      KIND_VERSION: "${{ matrix.kind-version }}"
      HELM_VERSION: "${{ matrix.helm-version }}"
      ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
    if: needs.trigger-tests.outputs.run-tests == 'true' || github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.6'
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - uses: engineerd/setup-kind@v0.4.0
        name: Setup Kind Cluster
        with:
          version: "${{ matrix.kind-version }}"
          name: airflow-python-${{matrix.python-version}}-${{matrix.kubernetes-version}}
          config: "scripts/ci/kubernetes/kind-cluster-conf.yaml"
      - name: "Deploy app to cluster"
        run: ./scripts/ci/kubernetes/ci_deploy_app_to_kubernetes.sh
      - name: Cache virtualenv for kubernetes testing
        uses: actions/cache@v2
        env:
          cache-name: cache-kubernetes-tests-virtualenv-v4
        with:
          path: .build/.kubernetes_venv
          key: "${{ env.cache-name }}-${{ github.job }}-v1"
      - name: "Tests"
        run: ./scripts/ci/kubernetes/ci_run_kubernetes_tests.sh
      - uses: actions/upload-artifact@v2
        name: Upload KinD logs
        # Always run this, even if one of th previous steps failed.
        if: always()
        with:
          name: 'kind-logs-${{matrix.kube-mode}}-${{matrix.python-version}}-${{matrix.kubernetes-version}}'
          path: '/tmp/kind_logs_*'

  tests-postgres:
    timeout-minutes: 80
    name: "${{matrix.test-type}}:Pg${{matrix.postgres-version}},Py${{matrix.python-version}}"
    runs-on: ubuntu-latest
    needs: [trigger-tests]
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
        postgres-version: [10, 12.2]
        test-type: [Core, Integration]
      fail-fast: false
    env:
      BACKEND: postgres
      PYTHON_MAJOR_MINOR_VERSION: ${{ matrix.python-version }}
      POSTGRES_VERSION: ${{ matrix.postgres-version }}
      RUN_TESTS: "true"
      TEST_TYPE: ${{ matrix.test-type }}
    if: needs.trigger-tests.outputs.run-tests == 'true' || github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.6'
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Build CI image ${{ matrix.python-version }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Tests"
        run: ./scripts/ci/testing/ci_run_airflow_testing.sh

  tests-mysql:
    timeout-minutes: 80
    name: "${{matrix.test-type}}:MySQL${{matrix.mysql-version}}, Py${{matrix.python-version}}"
    runs-on: ubuntu-latest
    needs: [trigger-tests]
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
        mysql-version: [5.6, 5.7]
        test-type: [Core, Integration]
      fail-fast: false
    env:
      BACKEND: mysql
      PYTHON_MAJOR_MINOR_VERSION: ${{ matrix.python-version }}
      MYSQL_VERSION: ${{ matrix.mysql-version }}
      RUN_TESTS: "true"
      TEST_TYPE: ${{ matrix.test-type }}
    if: needs.trigger-tests.outputs.run-tests == 'true' || github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Build CI image ${{ matrix.python-version }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Tests"
        run: ./scripts/ci/testing/ci_run_airflow_testing.sh

  tests-sqlite:
    timeout-minutes: 80
    name: "${{matrix.test-type}}:Sqlite Py${{matrix.python-version}}"
    runs-on: ubuntu-latest
    needs: [trigger-tests]
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
        test-type: [Core, Integration]
      fail-fast: false
    env:
      BACKEND: sqlite
      PYTHON_MAJOR_MINOR_VERSION: ${{ matrix.python-version }}
      TEST_TYPE: ${{ matrix.test-type }}
      RUN_TESTS: "true"
    if: needs.trigger-tests.outputs.run-tests == 'true' || github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Build CI image ${{ matrix.python-version }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Tests"
        run: ./scripts/ci/testing/ci_run_airflow_testing.sh

  tests-quarantined:
    timeout-minutes: 80
    name: "${{matrix.test-type}}:Pg${{matrix.postgres-version}},Py${{matrix.python-version}}"
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [trigger-tests]
    strategy:
      matrix:
        python-version: [3.6]
        postgres-version: [10]
        test-type: [Quarantined]
      fail-fast: false
    env:
      BACKEND: postgres
      PYTHON_MAJOR_MINOR_VERSION: ${{ matrix.python-version }}
      POSTGRES_VERSION: ${{ matrix.postgres-version }}
      RUN_TESTS: "true"
      TEST_TYPE: ${{ matrix.test-type }}
    if: needs.trigger-tests.outputs.run-tests == 'true' || github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Build CI image ${{ matrix.python-version }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Tests"
        run: ./scripts/ci/testing/ci_run_airflow_testing.sh

  helm-tests:
    timeout-minutes: 5
    name: "Checks: Helm tests"
    runs-on: ubuntu-latest
    needs:
      - cancel-previous-workflow-run
    steps:
      - uses: actions/checkout@v2
      - name: "Helm Tests"
        run: ./scripts/ci/kubernetes/ci_run_helm_testing.sh
      - name: "Cancel workflow on helm-tests failure"
        if: ${{ failure() }}
        uses: andymckay/cancel-action@0.2

  push-ci-images-to-github-cache:
    timeout-minutes: 40
    name: "Push CI images"
    runs-on: ubuntu-latest
    needs:
      - tests-sqlite
      - tests-postgres
      - tests-mysql
      - docs
    if: |
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/v1-10-12' ) &&
      github.event_name != 'schedule'
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    env:
      PULL_PYTHON_BASE_IMAGES_FROM_CACHE: "false"
      PYTHON_MAJOR_MINOR_VERSION: ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v2
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Build CI image"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Push CI image ${{ matrix.python-version }}"
        run: ./scripts/ci/images/ci_push_ci_image.sh

  constraints:
    timeout-minutes: 80
    name: "Constraints"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
      fail-fast: false
    needs:
      - cancel-previous-workflow-run
      - tests-sqlite
      - tests-mysql
      - tests-postgres
      - tests-kubernetes
    env:
      PYTHON_MAJOR_MINOR_VERSION: ${{ matrix.python-version }}
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/v1-10-12')
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
      - name: "Free space"
        run: ./scripts/ci/tools/ci_free_space_on_ci.sh
      - name: "Build CI image ${{ matrix.python-version }}"
        run: ./scripts/ci/images/ci_prepare_ci_image_on_ci.sh
      - name: "Generate constraints"
        run: ./scripts/ci/constraints/ci_generate_constraints.sh
      - uses: actions/upload-artifact@v2
        name: Upload constraint artifacts
        with:
          name: 'constraints-${{matrix.python-version}}'
          path: 'files/constraints-${{matrix.python-version}}/constraints-${{matrix.python-version}}.txt'

  deploy:
    timeout-minutes: 10
    name: "Publish wheels"
    runs-on: ubuntu-latest
    needs:
      - tests-sqlite
      - tests-postgres
      - tests-mysql
      - docs
    if: |
      (startsWith(github.ref, 'refs/tags/v1.10.12+astro') || github.ref == 'refs/heads/v1-10-12') &&
      github.event_name != 'pull_request'
    env:
      PULL_PYTHON_BASE_IMAGES_FROM_CACHE: "false"
      PYTHON_MAJOR_MINOR_VERSION: ${{ matrix.python-version }}
      CI_JOB_TYPE: "Prod image"
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - run: |
          pip install --upgrade pip==19.0.2
          pip install packaging GitPython wheel
      - name: Create Python Wheel
        run: ./scripts/ci/astronomer-release.sh
      - name: "Deploy Python Wheel and tar.gz"
        uses: actions-hub/gcloud@330.0.0
        env:
          APPLICATION_CREDENTIALS: ${{secrets.ASTRONOMER_PROD}}
          PROJECT_ID: ${{secrets.GCLOUD_PROJECT_ID}}
        with:
          args: cp -a public-read -r ./dist/* gs://pip.astronomer.io/simple
          cli: gsutil
      - name: "Deploy '.build' file (containing deployed version number)"
        uses: actions-hub/gcloud@330.0.0
        env:
          APPLICATION_CREDENTIALS: ${{secrets.ASTRONOMER_PROD}}
          PROJECT_ID: ${{secrets.GCLOUD_PROJECT_ID}}
        with:
          args: -h "Cache-Control:no-cache,max-age=0" cp -a public-read -r "./**/*.build" gs://pip.astronomer.io/simple/astronomer-certified
          cli: gsutil
      - name: Index Pages
        env:
          GOOGLE_APPLICATION_CREDENTIALS_CONTENT: ${{secrets.ASTRONOMER_PROD}}
        run: |
          git clone https://github.com/astronomer/pip-release-utilities.git pip-release-utilities
          ./pip-release-utilities/build-index-page.sh pip.astronomer.io simple/apache-airflow
          ./pip-release-utilities/build-index-page.sh pip.astronomer.io simple/astronomer-certified
